@page "/playerstats"
@using Client.Models
@using System.Data
@using Client.DTOs
@using Client.Enums
@inject HttpClient Http

<PageTitle>Player Stats</PageTitle>

<h1>Player Stats</h1>

<p>This component demonstrates players stats.</p>

@if (players == null)
{
    <p><em>Loading...</em></p>
}
else
{
    //pagination
    //get some divs involved
    //add logic to grey out goalkeeping stats if not viewing goalkeepers 
    //add table headers for passing and misc stats
    //investigate multiple selections.. just use a switch because so few permutations?

    <label for="player-selector">Filter Categories/Positions: </label>
    <select id="player-selector" @onchange="SelectedCategoryChanged">
        <optgroup label="Categories"></optgroup>
            <option value="All">All Players</option>
            <option value="Outfielders">Outfielders</option>
        <optgroup label="Positions"></optgroup>
            <option value="Goalkeepers">Goalkeepers</option>
            <option value="Defenders">Defenders</option>
            <option value="Midfielders">Midfielders</option>
            <option value="Forwards">Forwards</option>
    </select>

    <br />

    <label for="stat-selector">Filter Stats: </label>
    <select id="player-selector" @onchange="SelectedStatsCategoryChanged">
        <option value="GeneralStats">General</option>?
        <option value="GoalkeepingStats">Goalkeeping</option>
        <option value="DefendingStats">Defending</option>
        <option value="ShootingStats">Shooting</option>
        <option value="PassingStats">Passing</option>
        <option value="MiscStats">Misc</option>
    </select>

    <br /> <br />
    <button type="button" @onclick="DisplayTotal">Total</button>
    <button type="button" @onclick="DisplayPerNinety">P90</button>

    switch(statsToDisplay)
    {
        case StatCategory.General:
            <table class="table">
                <thead>
                    <tr>
                        @foreach(var header in Utils.TableHeaders._generalStatsTableHeaders)
                        {
                            <th>
                                @header
                                @if (Utils.IsASortableStat(header))
                                {
                                    <button type="button" @onclick="() => SortStatDescending(header)">D</button>
                                    <button type="button" @onclick="() => SortStatAscending(header)">A</button>
                                }
                            </th>
                        }
                    </tr>
                </thead>
                <tbody>
                @foreach (var player in players)
                {
                    <tr>
                        <td>@player.Name</td>
                        <td>@player.Club</td>
                        <td>@player.DateOfBirth</td>
                        <td>@player.OverallStatsDto.MatchesPlayed</td>
                        <td>@player.OverallStatsDto.MinutesPlayed</td>
                        <td>@player.OverallStatsDto.Goals</td>
                        <td>@player.OverallStatsDto.GoalAssist</td>
                        <td>@player.OverallStatsDto.AverageRating</td>
                    </tr>
                }
                </tbody>
            </table>
            break;
        case StatCategory.Attacking:
            <table class="table">
                <thead>
                    <tr>
                        @foreach(var header in Utils.TableHeaders._shootingStatsTableHeaders)
                        {
                            <th>
                                @header
                                @if (Utils.IsASortableStat(header))
                                {
                                    <button type="button" @onclick="() => SortStatDescending(header)">D</button>
                                    <button type="button" @onclick="() => SortStatAscending(header)">A</button>
                                }
                            </th>
                        }
                    </tr>
                </thead>
                <tbody>
                @foreach (var player in players)
                {
                    <tr>
                        <td>@player.Name</td>
                        <td>@player.Club</td>
                        <td>@player.OverallStatsDto.MinutesPlayed</td>
                        <td>@player.OverallStatsDto.Goals</td>
                        <td>@CalculateAndDisplayMinutesPerGoal(@player.OverallStatsDto.MinutesPlayed, @player.OverallStatsDto.Goals)</td>
                        <td>@player.OverallStatsDto.TotalShotsTaken</td>
                        <td>@player.OverallStatsDto.OnTargetScoringAttempt</td>
                        <td>@player.OverallStatsDto.BigChanceMissed</td>
                    </tr>
                }
                </tbody>
            </table>
            break;
        case StatCategory.Goalkeeping:
            <table class="table">
                <thead>
                    <tr>
                        @foreach(var header in Utils.TableHeaders._goalkeepingStatsTableHeaders)
                        {
                            <th>
                                @header
                                @if (Utils.IsASortableStat(header))
                                {
                                    <button type="button" @onclick="() => SortStatDescending(header)">D</button>
                                    <button type="button" @onclick="() => SortStatAscending(header)">A</button>
                                }
                            </th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach(var player in players)
                    {
                        <tr>
                            <td>@player.Name</td>
                            <td>@player.Club</td>
                            <td>@player.OverallStatsDto.MatchesPlayed</td>
                            <td>@player.OverallStatsDto.CleanSheets</td>
                            <td>@player.OverallStatsDto.Saves</td>
                            <td>@player.CalculatePercentage(@player.OverallStatsDto.AccuratePass, @player.OverallStatsDto.TotalPass)</td>
                            <td>@player.CalculatePercentage(@player.OverallStatsDto.AccurateLongBalls, @player.OverallStatsDto.TotalLongBalls)</td>
                            <td>@player.OverallStatsDto.ErrorLeadToAShot</td>
                            <td>@player.OverallStatsDto.AverageRating</td>
                        </tr>
                    }
                </tbody>
            </table>
            break;
        case StatCategory.Defending:
            <table class="table">
                <thead>
                    <tr>
                        @foreach(var header in Utils.TableHeaders._defendingStatsTableHeaders)
                        {
                            <th>
                                @header
                                @if (Utils.IsASortableStat(header))
                                {
                                    <button type="button" @onclick="() => SortStatDescending(header)">D</button>
                                    <button type="button" @onclick="() => SortStatAscending(header)">A</button>
                                }
                            </th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach(var player in players)
                    {
                        <tr>
                            <td>@player.Name</td>
                            <td>@player.Club</td>
                            <td>@player.OverallStatsDto.MatchesPlayed</td>
                            <td>@player.OverallStatsDto.MinutesPlayed</td>
                            <td>@player.CalculatePercentage(@player.OverallStatsDto.DuelWon, @player.OverallStatsDto.TotalDuels)</td>
                            <td>@player.CalculatePercentage(@player.OverallStatsDto.AerialWon, @player.OverallStatsDto.TotalAerialDuels)</td>
                            <td>@player.OverallStatsDto.TotalTackle</td>
                            <td>@player.OverallStatsDto.OutfielderBlock</td>
                            <td>@player.OverallStatsDto.ErrorLeadToAShot</td>
                        </tr>
                    }
                </tbody>
            </table>
            break;
        case StatCategory.Passing:
            <table class="table">
                <thead>
                    <tr>
                        @foreach(var header in Utils.TableHeaders._passingStatsTableHeaders)
                        {
                            <th>
                                @header
                                @if (Utils.IsASortableStat(header))
                                {
                                    <button type="button" @onclick="() => SortStatDescending(header)">D</button>
                                    <button type="button" @onclick="() => SortStatAscending(header)">A</button>
                                }
                            </th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach(var player in players)
                    {
                        <tr>
                            <td>@player.Name</td>
                            <td>@player.Club</td>
                            <td>@player.OverallStatsDto.MatchesPlayed</td>
                            <td>@player.OverallStatsDto.MinutesPlayed</td>
                            <td>@player.OverallStatsDto.GoalAssist</td>
                            <td>@player.OverallStatsDto.TotalPass</td>
                            <td>@player.CalculatePercentage(@player.OverallStatsDto.AccuratePass, @player.OverallStatsDto.TotalPass)</td>
                            <td>@player.OverallStatsDto.KeyPass</td>
                            <td>@player.CalculatePercentage(@player.OverallStatsDto.AccurateLongBalls, @player.OverallStatsDto.TotalLongBalls)</td>
                        </tr>
                    }
                </tbody>
            </table>
            break;
        case StatCategory.Misc:
            <table class="table">
                <thead>
                    <tr>
                        @foreach(var header in Utils.TableHeaders._miscStatsTableHeaders)
                        {
                            <th>
                                @header
                                @if (Utils.IsASortableStat(header))
                                {
                                    <button type="button" @onclick="() => SortStatDescending(header)">D</button>
                                    <button type="button" @onclick="() => SortStatAscending(header)">A</button>
                                }
                            </th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach(var player in players)
                    {
                        <tr>
                            <td>@player.Name</td>
                            <td>@player.Club</td>
                            <td>@player.OverallStatsDto.MatchesPlayed</td>
                            <td>@player.OverallStatsDto.MinutesPlayed</td>
                            <td>@player.OverallStatsDto.Touches</td>
                            <td>@player.OverallStatsDto.Captain</td>
                            <td>@player.OverallStatsDto.TotalOffside</td>
                            <td>@player.OverallStatsDto.Fouls</td>
                            <td>@player.OverallStatsDto.WasFouled</td>
                        </tr>
                    }
                </tbody>
            </table>
            break;
    }
}

@code {
    private IEnumerable<PlayerDto>? players;
    private IEnumerable<PlayerDto>? allPlayers;
    private IEnumerable<PlayerDto>? outfieldPlayers;
    private IEnumerable<PlayerDto>? goalkeeperPlayers;

    private bool isPerNinety;
    private StatCategory statsToDisplay = StatCategory.General;

    protected override async Task OnInitializedAsync()
    {
        players = await Http.GetFromJsonAsync<IEnumerable<PlayerDto>>("http://localhost:5247/api/Players/overall");
        allPlayers = players;
        outfieldPlayers = players.Where(p => p.Position != "G");
        goalkeeperPlayers = players.Where(p => p.Position == "G");
        players = outfieldPlayers;
    }

    private void SelectedCategoryChanged(ChangeEventArgs e)
    {
        if(e.Value != null)
        {
            switch (e.Value.ToString())
            {
                case "Goalkeepers":
                    DisplayGoalkeepers();
                    break;
                case "All":
                    DisplayAllPlayers();
                    break;
                case "Outfielders":
                    DisplayOutfielders();
                    break;
                case "Defenders":
                    DisplayDefenders();
                    break;
                case "Midfielders":
                    DisplayMidfielders();
                    break;
                case "Forwards":
                    DisplayForwards();
                    break;
            }
        }
    }

    private void SelectedStatsCategoryChanged(ChangeEventArgs e)
    {
        if(e.Value != null)
        {
            switch (e.Value.ToString())
            {
                case "GoalkeepingStats":
                    statsToDisplay = StatCategory.Goalkeeping;
                    break;
                case "DefendingStats":
                    statsToDisplay = StatCategory.Defending;
                    break;
                case "ShootingStats":
                    statsToDisplay = StatCategory.Attacking;
                    break;
                case "PassingStats":
                    statsToDisplay = StatCategory.Passing;
                    break;
                case "GeneralStats":
                    statsToDisplay = StatCategory.General;
                    break;
                case "MiscStats":
                    statsToDisplay = StatCategory.Misc;
                    break;
            }
        }
    }

    private string CalculateAndDisplayMinutesPerGoal(double minutes, double goals) 
    {
        if(isPerNinety)
        {
            var actualGoals = Math.Round((goals / 90 * minutes), 0, MidpointRounding.AwayFromZero);
            return actualGoals != 0 ? Math.Round(minutes / actualGoals, 2, MidpointRounding.AwayFromZero).ToString() : "-";
        }
        
        return goals != 0 ? Math.Round(minutes / goals, 2, MidpointRounding.AwayFromZero).ToString() : "-";
    }
    
    private void SortStatDescending(string stat)
    {
        switch (statsToDisplay)
        {
            case StatCategory.General:
                SortGeneralStatDescending(stat);
                break;
            case StatCategory.Attacking:
                SortAttackingStatDescending(stat);
                break;
            case StatCategory.Defending:
                SortDefendingStatDescending(stat);
                break;
            case StatCategory.Goalkeeping:
                SortGoalkeepingStatDescending(stat);
                break;
        }
    }

    private void SortStatAscending(string stat)
    {
        switch (statsToDisplay)
        {
            case StatCategory.General:
                SortGeneralStatAscending(stat);
                break;
            case StatCategory.Attacking:
                SortAttackingStatAscending(stat);
                break;
            case StatCategory.Defending:
                SortDefendingStatAscending(stat);
                break;
            case StatCategory.Goalkeeping:
                SortGoalkeepingStatAscending(stat);
                break;
        }
    }

    private void SortAttackingStatDescending(string stat)
    {
        switch(stat)
        {
            case "Minutes":
                players = players.OrderByDescending(p => p.OverallStatsDto.MinutesPlayed);
                break;
            case "Minutes Per Goal":
                players = players.OrderByDescending(p => p.OverallStatsDto.MinutesPlayed / p.OverallStatsDto.Goals);
                break;
            case "Shots":
                players = players.OrderByDescending(p => p.OverallStatsDto.TotalShotsTaken);
                break;
            case "Shots On Target":
                players = players.OrderByDescending(p => p.OverallStatsDto.OnTargetScoringAttempt);
                break;
            case "Big Chances Missed":
                players = players.OrderByDescending(p => p.OverallStatsDto.BigChanceMissed);
                break;
            case "Goals":
                players = players.OrderByDescending(p => p.OverallStatsDto.Goals);
                break;
        }
    }

    private void SortGeneralStatDescending(string stat)
    {
        switch(stat)
        {
            case "Goals":
                players = players.OrderByDescending(p => p.OverallStatsDto.Goals);
                break;
            case "Assists":
                players = players.OrderByDescending(p => p.OverallStatsDto.GoalAssist);
                break;
            case "Appearances":
                players = players.OrderByDescending(p => p.OverallStatsDto.MatchesPlayed);
                break;
            case "Minutes":
                players = players.OrderByDescending(p => p.OverallStatsDto.MinutesPlayed);
                break;
            case "Average Rating":
                players = players.OrderByDescending(p => p.OverallStatsDto.AverageRating);
                break;
        }
    }

    private void SortDefendingStatDescending(string stat)
    {
        switch(stat)
        {
            case "Minutes":
                players = players.OrderByDescending(p => p.OverallStatsDto.MinutesPlayed);
                break;
            case "Appearances":
                players = players.OrderByDescending(p => p.OverallStatsDto.MatchesPlayed);
                break;
            case "Duels Won (%)":
                players = players.OrderByDescending(p => p.OverallStatsDto.DuelWon / p.OverallStatsDto.TotalDuels);
                break;
            case "Aerial Duels Won (%)":
                players = players.OrderByDescending(p => p.OverallStatsDto.AerialWon / p.OverallStatsDto.TotalAerialDuels);
                break;
            case "Tackles":
                players = players.OrderByDescending(p => p.OverallStatsDto.TotalTackle);
                break;
            case "Shots Blocked":
                players = players.OrderByDescending(p => p.OverallStatsDto.OutfielderBlock);
                break;
            case "Errors Leading To Shot":
                players = players.OrderByDescending(p => p.OverallStatsDto.ErrorLeadToAShot);
                break;
        }
    }

    private void SortGoalkeepingStatDescending(string stat)
    {
        switch(stat)
        {
            case "Clean Sheets":
                players = players.OrderByDescending(p => p.OverallStatsDto.CleanSheets);
                break;
            case "Appearances":
                players = players.OrderByDescending(p => p.OverallStatsDto.MatchesPlayed);
                break;
            case "Saves":
                players = players.OrderByDescending(p => p.OverallStatsDto.Saves);
                break;
            case "Pass Completion (%)":
                players = players.OrderByDescending(p => p.OverallStatsDto.AccuratePass / p.OverallStatsDto.TotalPass);
                break;
            case "Long Ball Completion (%)":
                players = players.OrderByDescending(p => p.OverallStatsDto.AccurateLongBalls / p.OverallStatsDto.TotalLongBalls);
                break;
            case "Errors Leading To Shot":
                players = players.OrderByDescending(p => p.OverallStatsDto.ErrorLeadToAShot);
                break;
            case "Average Rating":
                players = players.OrderByDescending(p => p.OverallStatsDto.AverageRating);
                break;
        }
    }

    private void SortAttackingStatAscending(string stat)
    {
        switch(stat)
        {
            case "Minutes":
                players = players.OrderBy(p => p.OverallStatsDto.MinutesPlayed);
                break;
            case "Minutes Per Goal":
                players = players.OrderBy(p => p.OverallStatsDto.MinutesPlayed / p.OverallStatsDto.Goals);
                break;
            case "Shots":
                players = players.OrderBy(p => p.OverallStatsDto.TotalShotsTaken);
                break;
            case "Shots On Target":
                players = players.OrderBy(p => p.OverallStatsDto.OnTargetScoringAttempt);
                break;
            case "Big Chances Missed":
                players = players.OrderBy(p => p.OverallStatsDto.BigChanceMissed);
                break;
            case "Goals":
                players = players.OrderBy(p => p.OverallStatsDto.Goals);
                break;
        }
    }

    private void SortGeneralStatAscending(string stat)
    {
        switch(stat)
        {
            case "Goals":
                players = players.OrderBy(p => p.OverallStatsDto.Goals);
                break;
            case "Assists":
                players = players.OrderBy(p => p.OverallStatsDto.GoalAssist);
                break;
            case "Appearances":
                players = players.OrderBy(p => p.OverallStatsDto.MatchesPlayed);
                break;
            case "Minutes":
                players = players.OrderBy(p => p.OverallStatsDto.MinutesPlayed);
                break;
            case "Average Rating":
                players = players.OrderBy(p => p.OverallStatsDto.AverageRating);
                break;
        }
    }

    private void SortDefendingStatAscending(string stat)
    {
        switch(stat)
        {
            case "Minutes":
                players = players.OrderBy(p => p.OverallStatsDto.MinutesPlayed);
                break;
            case "Appearances":
                players = players.OrderBy(p => p.OverallStatsDto.MatchesPlayed);
                break;
            case "Duels Won (%)":
                players = players.OrderBy(p => p.OverallStatsDto.DuelWon / p.OverallStatsDto.TotalDuels);
                break;
            case "Aerial Duels Won (%)":
                players = players.OrderBy(p => p.OverallStatsDto.AerialWon / p.OverallStatsDto.TotalAerialDuels);
                break;
            case "Tackles":
                players = players.OrderBy(p => p.OverallStatsDto.TotalTackle);
                break;
            case "Shots Blocked":
                players = players.OrderBy(p => p.OverallStatsDto.OutfielderBlock);
                break;
            case "Errors Leading To Shot":
                players = players.OrderBy(p => p.OverallStatsDto.ErrorLeadToAShot);
                break;
        }
    }

    private void SortGoalkeepingStatAscending(string stat)
    {
        switch(stat)
        {
            case "Clean Sheets":
                players = players.OrderBy(p => p.OverallStatsDto.CleanSheets);
                break;
            case "Appearances":
                players = players.OrderBy(p => p.OverallStatsDto.MatchesPlayed);
                break;
            case "Saves":
                players = players.OrderBy(p => p.OverallStatsDto.Saves);
                break;
            case "Pass Completion (%)":
                players = players.OrderBy(p => p.OverallStatsDto.AccuratePass / p.OverallStatsDto.TotalPass);
                break;
            case "Long Ball Completion (%)":
                players = players.OrderBy(p => p.OverallStatsDto.AccurateLongBalls / p.OverallStatsDto.TotalLongBalls);
                break;
            case "Errors Leading To Shot":
                players = players.OrderBy(p => p.OverallStatsDto.ErrorLeadToAShot);
                break;
            case "Average Rating":
                players = players.OrderBy(p => p.OverallStatsDto.AverageRating);
                break;
        }
    }

    private void DisplayTotal()
    {
        if (!isPerNinety)
            return;

        isPerNinety = false;

        foreach (var player in players)
        {
            player.ConvertStatsToTotal();
        }
    }

    private void DisplayPerNinety()
    {
        if (isPerNinety)
            return;

        isPerNinety = true;

        foreach (var player in players)
        {
            player.ConvertStatsToPerNinety();
        }
    }

    private void DisplayOutfielders()
    {
        players = outfieldPlayers;
        statsToDisplay = StatCategory.General;
    }

    private void DisplayDefenders()
    {
        players = outfieldPlayers.Where(p => p.Position == "D");
        statsToDisplay = StatCategory.General;
    }

    private void DisplayMidfielders()
    {
        players = outfieldPlayers.Where(p => p.Position == "M");
        statsToDisplay = StatCategory.General;
    }

    private void DisplayForwards()
    {
        players = outfieldPlayers.Where(p => p.Position == "F");
        statsToDisplay = StatCategory.General;
    }

    private void DisplayGoalkeepers()
    {
        players = goalkeeperPlayers;
        statsToDisplay = StatCategory.Goalkeeping;
    }

    private void DisplayAllPlayers()
    {
        players = allPlayers;
        statsToDisplay = StatCategory.Attacking;
    }

    private void DisplayDefensiveStats()
    {
        players = outfieldPlayers;
        statsToDisplay = StatCategory.Defending;
    }

    private void DisplayAttackingStats()
    {
        players = outfieldPlayers;
        statsToDisplay = StatCategory.Attacking;
    }

    private void DisplayGeneralStats()
    {
        statsToDisplay = StatCategory.General;
    }
}
