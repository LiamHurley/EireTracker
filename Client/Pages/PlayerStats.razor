@page "/playerstats"
@using Client.Models
@using System.Data
@using Client.DTOs
@using Client.Enums
@inject HttpClient Http

<PageTitle>Player Stats</PageTitle>

<h1>Player Stats</h1>

<p>This component demonstrates players stats.</p>

@if (players == null)
{
    <p><em>Loading...</em></p>
}
else
{
    //buttons for diff types of stats
    //pagination

    <button type="button" @onclick="DisplayOutfielders">Show Outfielders</button>
    <button type="button" @onclick="DisplayGoalkeepers">Show Goalkeepers</button>
    <button type="button" @onclick="DisplayAllPlayers">Show All</button>

    <br /><br />

    <button type="button" @onclick="DisplayDefensiveStats">Defensive Stats</button>

    <br /> <br />
    <button type="button" @onclick="DisplayTotal">Total</button>
    <button type="button" @onclick="DisplayPerNinety">P90</button>

    switch(statsToDisplay){
        case StatCategory.Attacking:
            <table class="table">
                <thead>
                <tr>
                    <th>Name</th>
                    <th @onclick="SortByGoals">Goals</th>
                    <th @onclick="SortByAssists">Assists</th>
                    <th @onclick="SortByMinutes">Minutes</th>
                    <th>Passes Completed</th>
                    <th>Touches</th>
                    <th>Average Rating</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var player in players)
                {
                    <tr>
                        <td>@player.Name</td>
                        <td>@player.OverallStatsDto.Goals</td>
                        <td>@player.OverallStatsDto.GoalAssist</td>
                        <td>@player.OverallStatsDto.MinutesPlayed</td>
                        <td>@player.OverallStatsDto.AccuratePass</td>
                        <td>@player.OverallStatsDto.Touches</td>
                        <td>@player.OverallStatsDto.AverageRating</td>
                    </tr>
                }
                </tbody>
            </table>
            break;
        case StatCategory.Goalkeeping:
            <table class="table">
                <thead>
                    <tr>
                        @foreach(var header in _goalkeepingStatsTableHeaders)
                        {
                            // TO-DO: figure out dynamically generating onclick events
                            <th>@header</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach(var player in players)
                    {
                        <tr>
                            <td>@player.Name</td>
                            <td>@player.Club</td>
                            <td>@player.OverallStatsDto.MatchesPlayed</td>
                            <td>@player.OverallStatsDto.CleanSheets</td>
                            <td>@player.OverallStatsDto.Saves</td>
                            <td>@player.OverallStatsDto.SavedShotsFromInsideTheBox</td>
                            <td>@player.CalculatePercentage(@player.OverallStatsDto.AccuratePass, @player.OverallStatsDto.TotalPass)</td>
                            <td>@player.CalculatePercentage(@player.OverallStatsDto.AccurateLongBalls, @player.OverallStatsDto.TotalLongBalls)</td>
                            <td>@player.OverallStatsDto.AverageRating</td>
                        </tr>
                    }
                </tbody>
            </table>
            break;
        case StatCategory.Defending:
            <table class="table">
                <thead>
                    <tr>
                        @foreach(var header in _defendingStatsTableHeaders)
                        {
                            // TO-DO: figure out dynamically generating onclick events
                            <th>@header</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach(var player in players)
                    {
                        <tr>
                            <td>@player.Name</td>
                            <td>@player.Club</td>
                            <td>@player.OverallStatsDto.MatchesPlayed</td>
                            <td>@player.OverallStatsDto.MinutesPlayed</td>
                            <td>@player.CalculatePercentage(@player.OverallStatsDto.DuelWon, (@player.OverallStatsDto.DuelWon + @player.OverallStatsDto.DuelLost))</td>
                            <td>@player.CalculatePercentage(@player.OverallStatsDto.AerialWon, (@player.OverallStatsDto.AerialLost + @player.OverallStatsDto.AerialWon))</td>
                            <td>@player.OverallStatsDto.TotalTackle</td>
                            <td>@player.OverallStatsDto.OutfielderBlock</td>
                            <td>@player.OverallStatsDto.ErrorLeadToAShot</td>
                        </tr>
                    }
                </tbody>
            </table>
            break;
    }

}

@code {
    private IEnumerable<PlayerDto>? players;
    private IEnumerable<PlayerDto>? allPlayers;
    private IEnumerable<PlayerDto>? outfieldPlayers;
    private IEnumerable<PlayerDto>? goalkeeperPlayers;

    private bool isPerNinety;

    private StatCategory statsToDisplay = StatCategory.Attacking;
    private readonly string[] _shootingStatsTableHeaders = { "Shots", "Shots On Target", "Big Chances Missed", "Goals" };
    private readonly string[] _goalkeepingStatsTableHeaders = { "Name", "Club", "Appearances", "Clean Sheets", "Saves", "Saves From Shots Inside Box", "Pass Completion (%)", "Long Ball Completion (%)", "Average Rating" };
    private readonly string[] _defendingStatsTableHeaders = { "Name", "Club", "Appearances", "Minutes", "Duels Won (%)", "Aerial Duels Won (%)",
                                                              "Tackles", "Shots Blocked", "Errors Leading To Shot" };

    protected override async Task OnInitializedAsync()
    {
        players = await Http.GetFromJsonAsync<IEnumerable<PlayerDto>>("http://localhost:5247/api/Players/overall");
        allPlayers = players;
        outfieldPlayers = players.Where(p => p.Position != "G");
        goalkeeperPlayers = players.Where(p => p.Position == "G");
    }

    private void SortByGoals() => players = players.OrderByDescending(p => p.OverallStatsDto.Goals);
    private void SortByAssists() => players = players.OrderByDescending(p => p.OverallStatsDto.GoalAssist);
    private void SortByMinutes() => players = players.OrderByDescending(p => p.OverallStatsDto.MinutesPlayed);

    private void DisplayTotal()
    {
        if (!isPerNinety)
            return;

        isPerNinety = false;

        foreach (var player in players)
        {
            player.ConvertStatsToTotal();
        }
    }

    private void DisplayPerNinety()
    {
        if (isPerNinety)
            return;

        isPerNinety = true;

        foreach (var player in players)
        {
            player.ConvertStatsToPerNinety();
        }
    }

    private void DisplayOutfielders()
    {
        players = outfieldPlayers;
        statsToDisplay = StatCategory.Attacking;
    }

    private void DisplayGoalkeepers()
    {
        players = goalkeeperPlayers;
        statsToDisplay = StatCategory.Goalkeeping;
    }

    private void DisplayAllPlayers()
    {
        players = allPlayers;
        statsToDisplay = StatCategory.Attacking;
    }

    private void DisplayDefensiveStats()
    {
        players = outfieldPlayers;
        statsToDisplay = StatCategory.Defending;
    }
}
