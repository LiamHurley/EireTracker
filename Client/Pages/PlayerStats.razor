@page "/playerstats"
@using Client.Models
@using System.Data
@using Client.DTOs
@using Client.Enums
@inject HttpClient Http

<PageTitle>Player Stats</PageTitle>

<h1>Player Stats</h1>

<p>This component demonstrates players stats.</p>

@if (players == null)
{
    <p><em>Loading...</em></p>
}
else
{
    //pagination

    <button type="button" @onclick="DisplayOutfielders">Show Outfielders</button>
    <button type="button" @onclick="DisplayGoalkeepers">Show Goalkeepers</button>
    <button type="button" @onclick="DisplayAllPlayers">Show All</button>

    <br /><br />

    <button type="button" @onclick="DisplayDefensiveStats">Defensive Stats</button>
    <button type="button" @onclick="DisplayAttackingStats">Attacking Stats</button>
    <button type="button" @onclick="DisplayGeneralStats">General Stats</button>

    <br /> <br />
    <button type="button" @onclick="DisplayTotal">Total</button>
    <button type="button" @onclick="DisplayPerNinety">P90</button>

    switch(statsToDisplay)
    {
        case StatCategory.General:
            <table class="table">
                <thead>
                    <tr>
                        @foreach(var header in _generalStatsTableHeaders)
                        {
                            <th>
                                @header
                                @if (Utils.IsASortableStat(header))
                                {
                                    <button type="button" @onclick="() => SortStatDescending(header)">D</button>
                                    <button type="button" @onclick="() => SortStatAscending(header)">A</button>
                                }
                            </th>
                        }
                    </tr>
                </thead>
                <tbody>
                @foreach (var player in players)
                {
                    <tr>
                        <td>@player.Name</td>
                        <td>@player.Club</td>
                        <td>@player.DateOfBirth</td>
                        <td>@player.OverallStatsDto.MatchesPlayed</td>
                        <td>@player.OverallStatsDto.MinutesPlayed</td>
                        <td>@player.OverallStatsDto.Goals</td>
                        <td>@player.OverallStatsDto.GoalAssist</td>
                        <td>@player.OverallStatsDto.AverageRating</td>
                    </tr>
                }
                </tbody>
            </table>
            break;
        case StatCategory.Attacking:
            <table class="table">
                <thead>
                    <tr>
                        @foreach(var header in _shootingStatsTableHeaders)
                        {
                            <th>
                                @header
                                @if (Utils.IsASortableStat(header))
                                {
                                    <button type="button" @onclick="() => SortStatDescending(header)">D</button>
                                    <button type="button" @onclick="() => SortStatAscending(header)">A</button>
                                }
                            </th>
                        }
                    </tr>
                </thead>
                <tbody>
                @foreach (var player in players)
                {
                    <tr>
                        <td>@player.Name</td>
                        <td>@player.Club</td>
                        <td>@player.OverallStatsDto.MinutesPlayed</td>
                        <td>@player.OverallStatsDto.Goals</td>
                        <td>@CalculateMinutesPerGoal(@player.OverallStatsDto.MinutesPlayed, @player.OverallStatsDto.Goals)</td>
                        <td>@player.OverallStatsDto.TotalShotsTaken</td>
                        <td>@player.OverallStatsDto.OnTargetScoringAttempt</td>
                        <td>@player.OverallStatsDto.BigChanceMissed</td>
                    </tr>
                }
                </tbody>
            </table>
            break;
        case StatCategory.Goalkeeping:
            <table class="table">
                <thead>
                    <tr>
                        @foreach(var header in _goalkeepingStatsTableHeaders)
                        {
                            <th>
                                @header
                                @if (Utils.IsASortableStat(header))
                                {
                                    <button type="button" @onclick="() => SortStatDescending(header)">D</button>
                                    <button type="button" @onclick="() => SortStatAscending(header)">A</button>
                                }
                            </th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach(var player in players)
                    {
                        <tr>
                            <td>@player.Name</td>
                            <td>@player.Club</td>
                            <td>@player.OverallStatsDto.MatchesPlayed</td>
                            <td>@player.OverallStatsDto.CleanSheets</td>
                            <td>@player.OverallStatsDto.Saves</td>
                            <td>@player.CalculatePercentage(@player.OverallStatsDto.AccuratePass, @player.OverallStatsDto.TotalPass)</td>
                            <td>@player.CalculatePercentage(@player.OverallStatsDto.AccurateLongBalls, @player.OverallStatsDto.TotalLongBalls)</td>
                            <td>@player.OverallStatsDto.ErrorLeadToAShot</td>
                            <td>@player.OverallStatsDto.AverageRating</td>
                        </tr>
                    }
                </tbody>
            </table>
            break;
        case StatCategory.Defending:
            <table class="table">
                <thead>
                    <tr>
                        @foreach(var header in _defendingStatsTableHeaders)
                        {
                            <th>
                                @header
                                @if (Utils.IsASortableStat(header))
                                {
                                    <button type="button" @onclick="() => SortStatDescending(header)">D</button>
                                    <button type="button" @onclick="() => SortStatAscending(header)">A</button>
                                }
                            </th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach(var player in players)
                    {
                        <tr>
                            <td>@player.Name</td>
                            <td>@player.Club</td>
                            <td>@player.OverallStatsDto.MatchesPlayed</td>
                            <td>@player.OverallStatsDto.MinutesPlayed</td>
                            <td>@player.CalculatePercentage(@player.OverallStatsDto.DuelWon, @player.OverallStatsDto.TotalDuels)</td>
                            <td>@player.CalculatePercentage(@player.OverallStatsDto.AerialWon, @player.OverallStatsDto.TotalAerialDuels)</td>
                            <td>@player.OverallStatsDto.TotalTackle</td>
                            <td>@player.OverallStatsDto.OutfielderBlock</td>
                            <td>@player.OverallStatsDto.ErrorLeadToAShot</td>
                        </tr>
                    }
                </tbody>
            </table>
            break;
    }

}

@code {
    private IEnumerable<PlayerDto>? players;
    private IEnumerable<PlayerDto>? allPlayers;
    private IEnumerable<PlayerDto>? outfieldPlayers;
    private IEnumerable<PlayerDto>? goalkeeperPlayers;

    private bool isPerNinety;
    private StatCategory statsToDisplay = StatCategory.General;

    private readonly string[] _shootingStatsTableHeaders = { "Name", "Club", "Minutes", "Goals", "Minutes Per Goal", "Shots", "Shots On Target", "Big Chances Missed",  };
    private readonly string[] _goalkeepingStatsTableHeaders = { "Name", "Club", "Appearances", "Clean Sheets", "Saves", 
                                                                "Pass Completion (%)", "Long Ball Completion (%)", "Errors Leading To Shot", "Average Rating" };
    private readonly string[] _defendingStatsTableHeaders = { "Name", "Club", "Appearances", "Minutes", "Duels Won (%)", "Aerial Duels Won (%)",
                                                              "Tackles", "Shots Blocked", "Errors Leading To Shot" };
    private readonly string[] _generalStatsTableHeaders = { "Name", "Club", "Age", "Appearances", "Minutes", "Goals", "Assists", "Average Rating" };


    protected override async Task OnInitializedAsync()
    {
        players = await Http.GetFromJsonAsync<IEnumerable<PlayerDto>>("http://localhost:5247/api/Players/overall");
        allPlayers = players;
        outfieldPlayers = players.Where(p => p.Position != "G");
        goalkeeperPlayers = players.Where(p => p.Position == "G");
        players = outfieldPlayers;
    }

    private string CalculateMinutesPerGoal(double minutes, double goals)
    {
        if(goals == 0)
            return "-";

        return Math.Round(minutes / goals, 2, MidpointRounding.AwayFromZero).ToString();
    }

    private void SortStatDescending(string stat)
    {
        switch (statsToDisplay)
        {
            case StatCategory.General:
                SortGeneralStatDescending(stat);
                break;
            case StatCategory.Attacking:
                SortAttackingStatDescending(stat);
                break;
            case StatCategory.Defending:
                SortDefendingStatDescending(stat);
                break;
            case StatCategory.Goalkeeping:
                SortGoalkeepingStatDescending(stat);
                break;
        }
    }

    private void SortStatAscending(string stat)
    {

    }

    private void SortAttackingStatDescending(string stat)
    {
        switch(stat)
        {
            case "Minutes":
                players = players.OrderByDescending(p => p.OverallStatsDto.MinutesPlayed);
                break;
            case "Minutes Per Goal":
                players = players.OrderByDescending(p => p.OverallStatsDto.MinutesPlayed / p.OverallStatsDto.Goals);
                break;
            case "Shots":
                players = players.OrderByDescending(p => p.OverallStatsDto.TotalShotsTaken);
                break;
            case "Shots On Target":
                players = players.OrderByDescending(p => p.OverallStatsDto.OnTargetScoringAttempt);
                break;
            case "Big Chances Missed":
                players = players.OrderByDescending(p => p.OverallStatsDto.BigChanceMissed);
                break;
            case "Goals":
                players = players.OrderByDescending(p => p.OverallStatsDto.Goals);
                break;
        }
    }

    private void SortGeneralStatDescending(string stat)
    {
        switch(stat)
        {
            case "Goals":
                players = players.OrderByDescending(p => p.OverallStatsDto.Goals);
                break;
            case "Assists":
                players = players.OrderByDescending(p => p.OverallStatsDto.GoalAssist);
                break;
            case "Appearances":
                players = players.OrderByDescending(p => p.OverallStatsDto.MatchesPlayed);
                break;
            case "Minutes":
                players = players.OrderByDescending(p => p.OverallStatsDto.MinutesPlayed);
                break;
            case "Average Rating":
                players = players.OrderByDescending(p => p.OverallStatsDto.AverageRating);
                break;
        }
    }

    private void SortDefendingStatDescending(string stat)
    {
        switch(stat)
        {
            case "Minutes":
                players = players.OrderByDescending(p => p.OverallStatsDto.MinutesPlayed);
                break;
            case "Appearances":
                players = players.OrderByDescending(p => p.OverallStatsDto.MatchesPlayed);
                break;
            case "Duels Won (%)":
                players = players.OrderByDescending(p => p.OverallStatsDto.DuelWon / p.OverallStatsDto.TotalDuels);
                break;
            case "Aerial Duels Won (%)":
                players = players.OrderByDescending(p => p.OverallStatsDto.AerialWon / p.OverallStatsDto.TotalAerialDuels);
                break;
            case "Tackles":
                players = players.OrderByDescending(p => p.OverallStatsDto.TotalTackle);
                break;
            case "Shots Blocked":
                players = players.OrderByDescending(p => p.OverallStatsDto.OutfielderBlock);
                break;
            case "Errors Leading To Shot":
                players = players.OrderByDescending(p => p.OverallStatsDto.ErrorLeadToAShot);
                break;
        }
    }

    private void SortGoalkeepingStatDescending(string stat)
    {
        switch(stat)
        {
            case "Clean Sheets":
                players = players.OrderByDescending(p => p.OverallStatsDto.CleanSheets);
                break;
            case "Appearances":
                players = players.OrderByDescending(p => p.OverallStatsDto.MatchesPlayed);
                break;
            case "Saves":
                players = players.OrderByDescending(p => p.OverallStatsDto.Saves);
                break;
            case "Pass Completion (%)":
                players = players.OrderByDescending(p => p.OverallStatsDto.AccuratePass / p.OverallStatsDto.TotalPass);
                break;
            case "Long Ball Completion (%)":
                players = players.OrderByDescending(p => p.OverallStatsDto.AccurateLongBalls / p.OverallStatsDto.TotalLongBalls);
                break;
            case "Errors Leading To Shot":
                players = players.OrderByDescending(p => p.OverallStatsDto.ErrorLeadToAShot);
                break;
            case "Average Rating":
                players = players.OrderByDescending(p => p.OverallStatsDto.AverageRating);
                break;
        }
    }

    private void DisplayTotal()
    {
        if (!isPerNinety)
            return;

        isPerNinety = false;

        foreach (var player in players)
        {
            player.ConvertStatsToTotal();
        }
    }

    private void DisplayPerNinety()
    {
        if (isPerNinety)
            return;

        isPerNinety = true;

        foreach (var player in players)
        {
            player.ConvertStatsToPerNinety();
        }
    }

    private void DisplayOutfielders()
    {
        players = outfieldPlayers;
        statsToDisplay = StatCategory.General;
    }

    private void DisplayGoalkeepers()
    {
        players = goalkeeperPlayers;
        statsToDisplay = StatCategory.Goalkeeping;
    }

    private void DisplayAllPlayers()
    {
        players = allPlayers;
        statsToDisplay = StatCategory.Attacking;
    }

    private void DisplayDefensiveStats()
    {
        players = outfieldPlayers;
        statsToDisplay = StatCategory.Defending;
    }

    private void DisplayAttackingStats()
    {
        players = outfieldPlayers;
        statsToDisplay = StatCategory.Attacking;
    }

    private void DisplayGeneralStats()
    {
        statsToDisplay = StatCategory.General;
    }
}
